(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{693:function(a,t,e){"use strict";e.r(t);var r=e(27),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"逃逸分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析"}},[a._v("#")]),a._v(" 逃逸分析")]),a._v(" "),e("p",[a._v("Escape Analysis 是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。")]),a._v(" "),e("h3",{attrs:{id:"开启-关闭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开启-关闭"}},[a._v("#")]),a._v(" 开启/关闭")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-server -XX:+DoEscapeAnalysis\n-server -XX:-DoEscapeAnalysis\n")])])]),e("h2",{attrs:{id:"tlab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tlab"}},[a._v("#")]),a._v(" TLAB")]),a._v(" "),e("p",[a._v("JVM在内存新生代Eden Space中开辟了一小块区域，由线程私有，称作TLAB（Thread-local allocation buffer），默认设定为占用Eden Space的1%。在Java程序中很多对象都是小对象且用过即丢，它们不存在线程共享也适合被快速GC，所以对于小对象通常JVM会优先分配在TLAB上，并且TLAB上的分配由于是线程私有所以没有锁开销。因此在实践中分配多个小对象的效率通常比分配一个大对象的效率要高")]),a._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/qq_32575047/article/details/81214178",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM之逃逸分析"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("a",{attrs:{href:"https://hesey.wang/2011/07/object-allocation-on-non-heap.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("对象都是在堆上分配的吗？"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);