(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{541:function(t,v,_){"use strict";_.r(v);var e=_(25),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性")]),t._v(" "),_("h2",{attrs:{id:"核心类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#核心类"}},[t._v("#")]),t._v(" 核心类")]),t._v(" "),_("ul",[_("li",[t._v("Class类 代表类的实体，在运行的Java应用程序中表示类和接口")]),t._v(" "),_("li",[t._v("Field类 代表类的成员变量（成员变量也称为类的属性）")]),t._v(" "),_("li",[t._v("Method类 代表类的方法")]),t._v(" "),_("li",[t._v("Constructor类 代表类的构造方法")])]),t._v(" "),_("h3",{attrs:{id:"class"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[t._v("#")]),t._v(" Class")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("获得类相关的方法")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("code",[t._v("asSubclass(Class<U> clazz)")])]),t._v(" "),_("td",[t._v("把传递的类的对象转换成代表其子类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("Cast")]),t._v(" "),_("td",[t._v("把对象转换成代表类或是接口的对象")])]),t._v(" "),_("tr",[_("td",[t._v("getClassLoader()")]),t._v(" "),_("td",[t._v("获得类的加载器")])]),t._v(" "),_("tr",[_("td",[t._v("getClasses()")]),t._v(" "),_("td",[t._v("返回一个数组，数组中包含该类中所有公共类和接口类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredClasses()")]),t._v(" "),_("td",[t._v("返回一个数组，数组中包含该类中所有类和接口类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("forName(String className)")]),t._v(" "),_("td",[t._v("根据类名返回类的对象")])]),t._v(" "),_("tr",[_("td",[t._v("getName()")]),t._v(" "),_("td",[t._v("获得类的完整路径名字")])]),t._v(" "),_("tr",[_("td",[t._v("newInstance()")]),t._v(" "),_("td",[t._v("创建类的实例")])]),t._v(" "),_("tr",[_("td",[t._v("getPackage()")]),t._v(" "),_("td",[t._v("获得类的包")])]),t._v(" "),_("tr",[_("td",[t._v("getSimpleName()")]),t._v(" "),_("td",[t._v("获得类的名字")])]),t._v(" "),_("tr",[_("td",[t._v("getSuperclass()")]),t._v(" "),_("td",[t._v("获得当前类继承的父类的名字")])]),t._v(" "),_("tr",[_("td",[t._v("getInterfaces()")]),t._v(" "),_("td",[t._v("获得当前类实现的类或是接口")])])])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("获得类中属性相关的方法")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("getField(String name)")]),t._v(" "),_("td",[t._v("获得某个公有的属性对象")])]),t._v(" "),_("tr",[_("td",[t._v("getFields()")]),t._v(" "),_("td",[t._v("获得所有公有的属性对象")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredField(String name)")]),t._v(" "),_("td",[t._v("获得某个属性对象")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredFields()")]),t._v(" "),_("td",[t._v("获得所有属性对象")])])])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("获得类中注解相关的方法")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("code",[t._v("getAnnotation(Class<A> annotationClass)")])]),t._v(" "),_("td",[t._v("返回该类中与参数类型匹配的公有注解对象")])]),t._v(" "),_("tr",[_("td",[t._v("getAnnotations()")]),t._v(" "),_("td",[t._v("返回该类所有的公有注解对象")])]),t._v(" "),_("tr",[_("td",[_("code",[t._v("getDeclaredAnnotation(Class<A> annotationClass)")])]),t._v(" "),_("td",[t._v("返回该类中与参数类型匹配的所有注解对象")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredAnnotations()")]),t._v(" "),_("td",[t._v("返回该类所有的注解对象")])])])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("获得类中构造器相关的方法")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("getConstructor(Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类中与参数类型匹配的公有构造方法")])]),t._v(" "),_("tr",[_("td",[t._v("getConstructors()")]),t._v(" "),_("td",[t._v("获得该类的所有公有构造方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredConstructor(Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类中与参数类型匹配的构造方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredConstructors()")]),t._v(" "),_("td",[t._v("获得该类所有构造方法")])])])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("获得类中方法相关的方法")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("getMethod(String name, Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类某个公有的方法")])]),t._v(" "),_("tr",[_("td",[t._v("getMethods()")]),t._v(" "),_("td",[t._v("获得该类所有公有的方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredMethod(String name, Class...<?> parameterTypes)")]),t._v(" "),_("td",[t._v("获得该类某个方法")])]),t._v(" "),_("tr",[_("td",[t._v("getDeclaredMethods()")]),t._v(" "),_("td",[t._v("获得该类所有方法")])])])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("类中其他重要的方法")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("isAnnotation()")]),t._v(" "),_("td",[t._v("如果是注解类型则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isAnnotationPresent(Class<? extends Annotation> annotationClass)")]),t._v(" "),_("td",[t._v("如果是指定类型注解类型则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isAnonymousClass()")]),t._v(" "),_("td",[t._v("如果是匿名类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isArray()")]),t._v(" "),_("td",[t._v("如果是一个数组类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isEnum()")]),t._v(" "),_("td",[t._v("如果是枚举类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isInstance(Object obj)")]),t._v(" "),_("td",[t._v("如果obj是该类的实例则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isInterface()")]),t._v(" "),_("td",[t._v("如果是接口类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isLocalClass()")]),t._v(" "),_("td",[t._v("如果是局部类则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("isMemberClass()")]),t._v(" "),_("td",[t._v("如果是内部类则返回true")])])])]),t._v(" "),_("h3",{attrs:{id:"field"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#field"}},[t._v("#")]),t._v(" Field")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("equals(Object obj)")]),t._v(" "),_("td",[t._v("属性与obj相等则返回true")])]),t._v(" "),_("tr",[_("td",[t._v("get(Object obj)")]),t._v(" "),_("td",[t._v("获得obj中对应的属性值")])]),t._v(" "),_("tr",[_("td",[t._v("set(Object obj, Object value)")]),t._v(" "),_("td",[t._v("设置obj中对应属性值")])])])]),t._v(" "),_("h3",{attrs:{id:"method"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#method"}},[t._v("#")]),t._v(" Method")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("invoke(Object obj, Object... args)")]),t._v(" "),_("td",[t._v("传递object对象及参数调用该对象对应的方法")])])])]),t._v(" "),_("h3",{attrs:{id:"constructor"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" Constructor")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法")]),t._v(" "),_("th",[t._v("用途")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("newInstance(Object... initargs)")]),t._v(" "),_("td",[t._v("根据传递的参数创建类的对象")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);