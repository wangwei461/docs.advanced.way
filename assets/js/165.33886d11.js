(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{731:function(t,e,r){"use strict";r.r(e);var a=r(27),l=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"工厂模式简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式简介"}},[t._v("#")]),t._v(" 工厂模式简介")]),t._v(" "),r("p",[t._v("定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中")]),t._v(" "),r("p",[t._v("按实际业务场景划分，工厂模式有 3 种不同的实现方式")]),t._v(" "),r("ul",[r("li",[t._v("简单工厂模式")])]),t._v(" "),r("p",[t._v("是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例")]),t._v(" "),r("p",[t._v("在简单工厂模式中创建实例的方法通常为静态（static）方法，因此简单工厂模式（Simple Factory Pattern）又叫作静态工厂方法模式（Static Factory Method Pattern）")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/patterns/build/工厂方法模式.html"}},[t._v("工厂方法模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/patterns/build/抽象工厂模式.html"}},[t._v("抽象工厂模式")])],1)])])}),[],!1,null,null,null);e.default=l.exports}}]);