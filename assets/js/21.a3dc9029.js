(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{511:function(a,v,t){a.exports=t.p+"assets/img/874963-20181025141841187-2032670242.e187feea.png"},512:function(a,v,t){a.exports=t.p+"assets/img/955092-20190313165427522-1253660306.33e8237f.jpg"},513:function(a,v,t){a.exports=t.p+"assets/img/874963-20181025151614705-952116296.a9e216d2.png"},683:function(a,v,t){"use strict";t.r(v);var _=t(27),r=Object(_.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h2",{attrs:{id:"模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模型"}},[a._v("#")]),a._v(" 模型")]),a._v(" "),_("p",[_("img",{attrs:{src:t(511),alt:""}})]),a._v(" "),_("h2",{attrs:{id:"程序计数器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),_("p",[a._v("程序计数器是一块很小的内存空间，它是线程私有的，可以认作为当前线程的行号指示器")]),a._v(" "),_("p",[a._v("倘若当前执行的是 JVM 的方法，则该寄存器中保存当前执行指令的地址；倘若执行的是native方法，则PC寄存器中为空")]),a._v(" "),_("h2",{attrs:{id:"虚拟机栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈"}},[a._v("#")]),a._v(" 虚拟机栈")]),a._v(" "),_("p",[a._v("可以被用来快速访问的存储区域，通过栈指针访问处理器。栈描述的是Java方法执行的内存模型\n每个方法被执行的时候都会创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用的过程就对应一个栈帧在虚拟机栈中从入栈到出栈的过程")]),a._v(" "),_("h3",{attrs:{id:"栈帧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#栈帧"}},[a._v("#")]),a._v(" 栈帧")]),a._v(" "),_("p",[a._v("栈帧是一种数据结构，用于虚拟机进行方法的调用和执行")]),a._v(" "),_("p",[a._v("结构内容:")]),a._v(" "),_("ul",[_("li",[a._v("局部变量表")]),a._v(" "),_("li",[a._v("操作数栈")]),a._v(" "),_("li",[a._v("动态链接")]),a._v(" "),_("li",[a._v("方法返回地址")]),a._v(" "),_("li",[a._v("附加信息")])]),a._v(" "),_("h4",{attrs:{id:"局部变量表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局部变量表"}},[a._v("#")]),a._v(" 局部变量表")]),a._v(" "),_("p",[_("strong",[a._v("局部变量表被定义成 从0开始的数字数组")])]),a._v(" "),_("p",[a._v("是一片逻辑连续的内存空间，最小单位是 "),_("code",[a._v("Slot")]),a._v(" ，用来存放方法参数和方法内部定义的局部变量。")]),a._v(" "),_("h4",{attrs:{id:"操作数栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作数栈"}},[a._v("#")]),a._v(" 操作数栈")]),a._v(" "),_("p",[a._v("每个栈帧都包含一个被叫做操作数栈的后进先出的栈")]),a._v(" "),_("p",[a._v("1.栈桢刚创建时，里面的操作数栈是空的。")]),a._v(" "),_("p",[a._v("2.Java虚拟机提供指令来让操作数栈对一些数据进行入栈操作，比如可以把局部变量表里的数据、实例的字段等数据入栈。")]),a._v(" "),_("p",[a._v("3.同时也有指令来支持出栈操作。")]),a._v(" "),_("p",[a._v("4.向其他方法传参的参数，也存在操作数栈中。")]),a._v(" "),_("p",[a._v("5.其他方法返回的结果，返回时存在操作数栈中。")]),a._v(" "),_("h4",{attrs:{id:"动态链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态链接"}},[a._v("#")]),a._v(" 动态链接")]),a._v(" "),_("p",[a._v("每一个栈帧内部都要包含一个指向运行时常量池的引用，来支持动态链接的实现")]),a._v(" "),_("h4",{attrs:{id:"方法返回地址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法返回地址"}},[a._v("#")]),a._v(" 方法返回地址")]),a._v(" "),_("p",[a._v("返回一个值给调用它的方法，方法正常完成发生在一个方法执行过程中遇到了方法返回的字节码指令的时候，使用哪种返回指令取决于方法返回值的数据类型（如果有返回值的话）")]),a._v(" "),_("h2",{attrs:{id:"堆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),_("p",[a._v("java堆在虚拟机启动的时候建立，它是java程序最主要的内存工作区域。几乎所有的java对象实例和数组都存放在java堆中。堆空间是所有线程共享的，这是一块与java应用密切相关的内存空间")]),a._v(" "),_("h3",{attrs:{id:"堆结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆结构"}},[a._v("#")]),a._v(" 堆结构")]),a._v(" "),_("p",[a._v("Java虚拟机将堆内存划分为新生代、老年代和永久代")]),a._v(" "),_("p",[_("img",{attrs:{src:t(512),alt:""}})]),a._v(" "),_("p",[_("img",{attrs:{src:t(513),alt:""}})]),a._v(" "),_("h4",{attrs:{id:"新生代"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新生代"}},[a._v("#")]),a._v(" 新生代")]),a._v(" "),_("p",[a._v("新生成的对象优先存放在新生代中，大对象直接进入老年代，或回收的内存不够用也进入老年代")]),a._v(" "),_("p",[a._v("收集过程")]),a._v(" "),_("ol",[_("li",[a._v("计算 "),_("code",[a._v("From Survivor")]),a._v(" 区的对象的年龄，超过阀值(15) 进入，老年代")]),a._v(" "),_("li",[a._v("未超过阀值，将 "),_("code",[a._v("Eden")]),a._v(" 区和 "),_("code",[a._v("From Survivor")]),a._v(" 复制到 "),_("code",[a._v("To Survivor")]),a._v(" 区")]),a._v(" "),_("li",[a._v("清空 "),_("code",[a._v("Eden")]),a._v(" 和 "),_("code",[a._v("From Survivor")])])]),a._v(" "),_("h4",{attrs:{id:"老年代"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#老年代"}},[a._v("#")]),a._v(" 老年代")]),a._v(" "),_("p",[a._v("在新生代中经历了多次（具体看虚拟机配置的阀值）GC后仍然存活下来的对象会进入老年代中。老年代中的对象生命周期较长，存活率比较高，在老年代中进行GC的频率相对而言较低，而且回收的速度也比较慢")]),a._v(" "),_("h2",{attrs:{id:"方法区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),_("p",[a._v("方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据")]),a._v(" "),_("p",[a._v("是jvm规范里面的运行时数据区的一个组成部分，jvm规范中的运行时数据区还包含了：pc寄存器、虚拟机栈、堆、方法区、运行时常量池、本地方法栈。主要用来存储class、运行时常量池、字段、方法、代码、JIT代码等。运行时数据区跟内存不是一个概念，方法区是运行时数据区的一部分。方法区是jvm规范中的一部分，并不是实际的实现，切忌将规范跟实现混为一谈")]),a._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),_("p",[_("a",{attrs:{href:"https://www.cnblogs.com/guanghe/p/10524314.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM结构及堆的划分"),_("OutboundLink")],1),a._v(" "),_("a",{attrs:{href:"https://www.cnblogs.com/cjsblog/p/9850300.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java8虚拟机内存模型"),_("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);