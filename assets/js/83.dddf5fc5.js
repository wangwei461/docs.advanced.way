(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{505:function(a,t,s){"use strict";s.r(t);var n=s(25),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"事务管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务管理"}},[a._v("#")]),a._v(" 事务管理")]),a._v(" "),s("p",[a._v("事务必须服从ACID原则。")]),a._v(" "),s("p",[a._v("ACID是原子性（atomicity）、一致性（consistency）、隔离性 （isolation）和持久性（durability）的缩写。")]),a._v(" "),s("p",[a._v("事务的原子性：表示事务执行过程中的任何失败都将导致事务所做的任何修改失效。\n事务的一致性：表示当事务执行失败时，所有被该事务影响的数据都应该恢复到事务执行前的状态。\n事务的隔离性：表示在事务执行过程中对数据的修改，在事务提交之前对其他事务不可见。\n事务的持久性：表示已提交的数据在事务执行失败时，数据的状态都应该正确。")]),a._v(" "),s("p",[a._v("通俗的理解，事务是一组原子操作单元，从数据库角度说，就是一组SQL指令，要么全部执行成功，若因为某个原因其中一条指令执行有错误，则撤销先前执行过的所有指令。")]),a._v(" "),s("p",[a._v("更简答的说就是："),s("code",[a._v("要么全部执行成功，要么撤销不执行")]),a._v(" "),s("code",[a._v("控制数据的安全访问")])]),a._v(" "),s("h3",{attrs:{id:"事务类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务类型"}},[a._v("#")]),a._v(" 事务类型")]),a._v(" "),s("p",[a._v("JDBC事务，JTA（Java Transaction API），容器事务")]),a._v(" "),s("h4",{attrs:{id:"spring容器事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring容器事务"}},[a._v("#")]),a._v(" Spring容器事务")]),a._v(" "),s("p",[a._v("spring本身不管理事务，而是提供事务管理器将事务委托给hibernate或jta持久化框架来实现事务\n")]),a._v(" "),s("p",[a._v("Spring事务管理器的接口是org.springframework.transaction.PlatformTransactionManager")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PlatformTransactionManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 由TransactionDefinition得到TransactionStatus对象")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionStatus")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionDefinition")]),a._v(" definition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 提交")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionStatus")]),a._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 回滚")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rollback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionStatus")]),a._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"事务属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务属性"}},[a._v("#")]),a._v(" 事务属性")]),a._v(" "),s("p",[s("code",[a._v("getTransaction(TransactionDefinition definition)")]),a._v("\n传播行为、隔离规则、回滚规则、事务超时、是否只读")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionDefinition")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getPropagationBehavior")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回事务的传播行为")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getIsolationLevel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 返回事务必须在多少秒内完成")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("isReadOnly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 事务是否只读，事务管理器能够根据这个返回值进行优化，确保事务是只读的")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n")])])]),s("h4",{attrs:{id:"_7种传播行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7种传播行为"}},[a._v("#")]),a._v(" 7种传播行为：")]),a._v(" "),s("blockquote",[s("p",[a._v("事务传播行为（propagation behavior）指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行。")])]),a._v(" "),s("p",[a._v("PROPAGATION_REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。")]),a._v(" "),s("p",[a._v("PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。")]),a._v(" "),s("p",[a._v("PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。")]),a._v(" "),s("p",[a._v("PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。")]),a._v(" "),s("p",[a._v("PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。")]),a._v(" "),s("p",[a._v("PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。")]),a._v(" "),s("p",[a._v("虽然有7种，但是常用的就第一种PROPAGATION_REQUIRED和第四种PROPAGATION_REQUIRES_NEW")]),a._v(" "),s("h4",{attrs:{id:"五个隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五个隔离级别"}},[a._v("#")]),a._v(" 五个隔离级别：")]),a._v(" "),s("p",[a._v("ISOLATION_DEFAULT：这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.")]),a._v(" "),s("p",[a._v("另外四个与JDBC的隔离级别相对应；")]),a._v(" "),s("p",[a._v("ISOLATION_READ_UNCOMMITTED：这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据。\n这种隔离级别会产生脏读，不可重复读和幻像读。")]),a._v(" "),s("p",[a._v("ISOLATION_READ_COMMITTED：保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。\n这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。")]),a._v(" "),s("p",[a._v("ISOLATION_REPEATABLE_READ：这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。\n它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。")]),a._v(" "),s("p",[a._v("ISOLATION_SERIALIZABLE：这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读")]),a._v(" "),s("h4",{attrs:{id:"事务配置方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务配置方式"}},[a._v("#")]),a._v(" 事务配置方式")]),a._v(" "),s("ol",[s("li",[a._v("注解")])]),a._v(" "),s("blockquote",[s("p",[a._v("@Transactional只能被应用到public方法上"),s("br"),a._v("\n默认情况下,一个有事务方法, 遇到RuntimeException 时会回滚 . 遇到 受检查的异常 是不会回滚 的. 要想所有异常都回滚,要加上 @Transactional( rollbackFor={Exception.class,其它异常})")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    readOnly "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//读写事务")]),a._v("\n    timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//事务的超时时间，-1为无限制")]),a._v("\n    noRollbackFor "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArithmeticException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//遇到指定的异常不回滚")]),a._v("\n    isolation "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Isolation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("DEFAULT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//事务的隔离级别，此处使用后端数据库的默认隔离级别")]),a._v("\n    propagation "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Propagation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("REQUIRED "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//事务的传播行为")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("xml配置")])]),a._v(" "),s("h4",{attrs:{id:"异常回滚"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常回滚"}},[a._v("#")]),a._v(" 异常回滚")]),a._v(" "),s("h6",{attrs:{id:"异常分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常分类"}},[a._v("#")]),a._v(" 异常分类")]),a._v(" "),s("p",[a._v("1.运行时异常 和 非运行时异常"),s("br"),a._v("\n2.可查的异常（checked exceptions）和 不可查的异常（unchecked exceptions）")]),a._v(" "),s("h6",{attrs:{id:"transactional回滚"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transactional回滚"}},[a._v("#")]),a._v(" @Transactional回滚")]),a._v(" "),s("ol",[s("li",[a._v("Error一定会回滚。")]),a._v(" "),s("li",[a._v("异常中：运行时异常(unchecked exceptions)一定会回滚。而非运行时异常(checked exceptions)，如IOExceptions和SQLExceptions不会回滚。")])]),a._v(" "),s("p",[a._v("让checked例外也回滚：在整个方法前加上 @Transactional(rollbackFor=Exception.class)\n让unchecked例外不回滚： @Transactional(noRollbackFor=RunTimeException.class)")]),a._v(" "),s("blockquote",[s("p",[a._v("注意： 如果异常被try-catch了，事务就不回滚了，必须抛向被@Transactional注解的层。")])]),a._v(" "),s("blockquote",[s("p",[a._v("checked： 一般是指程序不能直接控制的外界情况，是指在编译的时候就需要检查的一类exception，用户程序中必须采用try catch机制处理或者通过throws交由调用者来处理。这类异常，主要指除了Error以及RuntimeException及其子类之外的异常。")])]),a._v(" "),s("blockquote",[s("p",[a._v("unchecked：是指那些不需要在编译的时候就要处理的一类异常。在java体系里，所有的Error以及RuntimeException及其子类都是unchecked异常。再形象直白的理解为不需要try catch等机制处理的异常，可以认为是unchecked的异常。")])]),a._v(" "),s("h4",{attrs:{id:"事务超时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务超时"}},[a._v("#")]),a._v(" 事务超时")]),a._v(" "),s("p",[s("code",[a._v("@Transactional(timeout = 60)")])]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("int TIMEOUT_DEFAULT = -1")]),a._v(" 默认超时时间不限制")])]),a._v(" "),s("p",[a._v("如果用这个注解描述一个方法的话，线程已经跑到方法里面，如果已经过去60秒了还没跑完这个方法并且线程在这个方法中的后面还有涉及到对数据库的增删改查操作时会报事务超时错误（会回滚）")]),a._v(" "),s("p",[a._v("如果已经过去60秒了还没跑完但是后面已经没有涉及到对数据库的增删改查操作，那么这时不会报事务超时错误（不会回滚）")]),a._v(" "),s("h4",{attrs:{id:"只读事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#只读事务"}},[a._v("#")]),a._v(" 只读事务")]),a._v(" "),s("p",[a._v("从这一点设置的时间点开始（时间点a）到这个事务结束的过程中，其他事务所提交的数据，该事务将看不见！（查询中不会出现别人在时间点a之后提交的数据）")]),a._v(" "),s("h6",{attrs:{id:"应用场合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场合"}},[a._v("#")]),a._v(" 应用场合：")]),a._v(" "),s("p",[a._v("如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；")]),a._v(" "),s("p",[a._v("如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。")]),a._v(" "),s("blockquote",[s("p",[a._v("【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】")])]),a._v(" "),s("h6",{attrs:{id:"怎样设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎样设置"}},[a._v("#")]),a._v(" 怎样设置：")]),a._v(" "),s("p",[a._v("对于只读查询，可以指定事务类型为readonly，即只读事务。\n由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。")]),a._v(" "),s("ol",[s("li",[a._v("在JDBC中，指定只读事务的办法为： "),s("code",[a._v("connection.setReadOnly(true)")]),a._v(";")]),a._v(" "),s("li",[a._v("在Hibernate中，指定只读事务的办法为： "),s("code",[a._v("session.setFlushMode(FlushMode.NEVER)")]),a._v(";\n此时，Hibernate也会为只读事务提供Session方面的一些优化手段")]),a._v(" "),s("li",[a._v("在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly” 或者用注解方式"),s("code",[a._v("@Transactional(readOnly=true)")]),a._v("\n【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,\nand will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式")])]),a._v(" "),s("blockquote",[s("p",[a._v("在将事务设置成只读后，相当于将数据库设置成只读数据库，此时若要进行写的操作，会出现错误")])])])}),[],!1,null,null,null);t.default=e.exports}}]);