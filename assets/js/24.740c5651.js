(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{563:function(t,_,v){t.exports=v.p+"assets/img/gof.a746a837.png"},564:function(t,_,v){t.exports=v.p+"assets/img/j2ee.d147881a.png"},565:function(t,_,v){t.exports=v.p+"assets/img/the-relationship-between-design-patterns.24681155.jpg"},754:function(t,_,v){"use strict";v.r(_);var d=v(28),r=Object(d.a)({},(function(){var t=this,_=t.$createElement,d=t._self._c||_;return d("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[d("h2",{attrs:{id:"什么是设计模式"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#什么是设计模式"}},[t._v("#")]),t._v(" 什么是设计模式")]),t._v(" "),d("p",[t._v("设计模式是软件开发人员在软件开发过程中的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),d("p",[t._v("使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性")]),t._v(" "),d("h3",{attrs:{id:"gof"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#gof"}},[t._v("#")]),t._v(" GOF")]),t._v(" "),d("p",[t._v("在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。\n四位作者合称 GOF（四人帮，全拼 Gang of Four）")]),t._v(" "),d("ul",[d("li",[t._v("对接口编程而不是对实现编程。")]),t._v(" "),d("li",[t._v("优先使用对象组合而不是继承。")])]),t._v(" "),d("h3",{attrs:{id:"_23"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#_23"}},[t._v("#")]),t._v(" 23")]),t._v(" "),d("p",[d("img",{attrs:{src:v(563),alt:""}})]),t._v(" "),d("h3",{attrs:{id:"j2ee模式"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#j2ee模式"}},[t._v("#")]),t._v(" J2EE模式")]),t._v(" "),d("p",[d("img",{attrs:{src:v(564),alt:""}})]),t._v(" "),d("h2",{attrs:{id:"关系图"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#关系图"}},[t._v("#")]),t._v(" 关系图")]),t._v(" "),d("p",[d("img",{attrs:{src:v(565),alt:""}})]),t._v(" "),d("h2",{attrs:{id:"归纳设计模式"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#归纳设计模式"}},[t._v("#")]),t._v(" 归纳设计模式")]),t._v(" "),d("table",[d("thead",[d("tr",[d("th",[t._v("设计模式")]),t._v(" "),d("th",[t._v("简述")]),t._v(" "),d("th",[t._v("一句话归纳")]),t._v(" "),d("th",[t._v("目的")]),t._v(" "),d("th",[t._v("生活案例")])])]),t._v(" "),d("tbody",[d("tr",[d("td",[t._v("工厂模式（Factory Pattern）")]),t._v(" "),d("td",[t._v("不同条件下创建不同实例")]),t._v(" "),d("td",[t._v("产品标准化，生产更高效")]),t._v(" "),d("td",[t._v("封装创建细节")]),t._v(" "),d("td",[t._v("实体工厂")])]),t._v(" "),d("tr",[d("td",[t._v("单例模式（Singleton Pattern）")]),t._v(" "),d("td",[t._v("保证一个类仅有一个实例，并且提供一个全局访问点")]),t._v(" "),d("td",[t._v("世上只有一个我")]),t._v(" "),d("td",[t._v("保证独一无二")]),t._v(" "),d("td",[t._v("CEO")])]),t._v(" "),d("tr",[d("td",[t._v("原型模式（Prototype Pattern）")]),t._v(" "),d("td",[t._v("通过拷贝原型创建新的对象")]),t._v(" "),d("td",[t._v("拔一根猴毛，吹出千万个")]),t._v(" "),d("td",[t._v("高效创建对象")]),t._v(" "),d("td",[t._v("克隆")])]),t._v(" "),d("tr",[d("td",[t._v("建造者模式（Builder Pattern）")]),t._v(" "),d("td",[t._v("用来创建复杂的复合对象")]),t._v(" "),d("td",[t._v("高配中配和低配，想选哪配就哪配")]),t._v(" "),d("td",[t._v("开放个性配置步骤")]),t._v(" "),d("td",[t._v("选配")])]),t._v(" "),d("tr",[d("td",[t._v("代理模式（Proxy Pattern）")]),t._v(" "),d("td",[t._v("为其他对象提供一种代理以控制对这个对象的访问")]),t._v(" "),d("td",[t._v("没有资源没时间，得找别人来帮忙")]),t._v(" "),d("td",[t._v("增强职责")]),t._v(" "),d("td",[t._v("媒婆")])]),t._v(" "),d("tr",[d("td",[t._v("外观模式（Facade Pattern）")]),t._v(" "),d("td",[t._v("对外提供一个统一的接口用来访问子系统")]),t._v(" "),d("td",[t._v("打开一扇门，通向全世界")]),t._v(" "),d("td",[t._v("统一访问入口")]),t._v(" "),d("td",[t._v("前台")])]),t._v(" "),d("tr",[d("td",[t._v("装饰器模式（Decorator Pattern）")]),t._v(" "),d("td",[t._v("为对象添加新功能")]),t._v(" "),d("td",[t._v("他大舅他二舅都是他舅")]),t._v(" "),d("td",[t._v("灵活扩展、同宗同源")]),t._v(" "),d("td",[t._v("煎饼")])]),t._v(" "),d("tr",[d("td",[t._v("享元模式（Flyweight Pattern）")]),t._v(" "),d("td",[t._v("使用对象池来减少重复对象的创建")]),t._v(" "),d("td",[t._v("优化资源配置，减少重复浪费")]),t._v(" "),d("td",[t._v("共享资源池")]),t._v(" "),d("td",[t._v("全国社保联网")])]),t._v(" "),d("tr",[d("td",[t._v("组合模式（Composite Pattern）")]),t._v(" "),d("td",[t._v("将整体与局部（树形结构）进行递归组合，让客户端能够以一种的方式对其进行处理")]),t._v(" "),d("td",[t._v("人在一起叫团伙，心在一起叫团队")]),t._v(" "),d("td",[t._v("统一整体和个体")]),t._v(" "),d("td",[t._v("组织架构树")])]),t._v(" "),d("tr",[d("td",[t._v("适配器模式（Adapter Pattern）")]),t._v(" "),d("td",[t._v("将原来不兼容的两个类融合在一起")]),t._v(" "),d("td",[t._v("万能充电器")]),t._v(" "),d("td",[t._v("兼容转换")]),t._v(" "),d("td",[t._v("电源适配")])]),t._v(" "),d("tr",[d("td",[t._v("桥接模式（Bridge Pattern）")]),t._v(" "),d("td",[t._v("将两个能够独立变化的部分分离开来")]),t._v(" "),d("td",[t._v("约定优于配置")]),t._v(" "),d("td",[t._v("不允许用继承")]),t._v(" "),d("td",[t._v("桥")])]),t._v(" "),d("tr",[d("td",[t._v("模板模式（Template Pattern）")]),t._v(" "),d("td",[t._v("定义一套流程模板，根据需要实现模板中的操作")]),t._v(" "),d("td",[t._v("流程全部标准化，需要微调请覆盖")]),t._v(" "),d("td",[t._v("逻辑复用")]),t._v(" "),d("td",[t._v("把大象装进冰箱")])]),t._v(" "),d("tr",[d("td",[t._v("策略模式（Strategy Pattern）")]),t._v(" "),d("td",[t._v("封装不同的算法，算法之间能互相替换")]),t._v(" "),d("td",[t._v("条条大道通罗马，具体哪条你来定")]),t._v(" "),d("td",[t._v("把选择权交给用户")]),t._v(" "),d("td",[t._v("选择支付方式")])]),t._v(" "),d("tr",[d("td",[t._v("责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),d("td",[t._v("拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。")]),t._v(" "),d("td",[t._v("各人自扫门前雪，莫管他们瓦上霜")]),t._v(" "),d("td",[t._v("解耦处理逻辑")]),t._v(" "),d("td",[t._v("踢皮球")])]),t._v(" "),d("tr",[d("td",[t._v("迭代器模式（Iterator Pattern）")]),t._v(" "),d("td",[t._v("提供一种方法顺序访问一个聚合对象中的各个元素")]),t._v(" "),d("td",[t._v("流水线上坐一天，每个包裹扫一遍")]),t._v(" "),d("td",[t._v("统一对集合的访问方式")]),t._v(" "),d("td",[t._v("逐个检票进站")])]),t._v(" "),d("tr",[d("td",[t._v("命令模式（Command Pattern）")]),t._v(" "),d("td",[t._v("将请求封装成命令，并记录下来，能够撤销与重做")]),t._v(" "),d("td",[t._v("运筹帷幄之中，决胜千里之外")]),t._v(" "),d("td",[t._v("解耦请求和处理")]),t._v(" "),d("td",[t._v("遥控器")])]),t._v(" "),d("tr",[d("td",[t._v("状态模式（State Pattern）")]),t._v(" "),d("td",[t._v("根据不同的状态做出不同的行为")]),t._v(" "),d("td",[t._v("状态驱动行为，行为决定状态")]),t._v(" "),d("td",[t._v("绑定状态和行为")]),t._v(" "),d("td",[t._v("订单状态跟踪")])]),t._v(" "),d("tr",[d("td",[t._v("备忘录模式（Memento Pattern）")]),t._v(" "),d("td",[t._v("保存对象的状态，在需要时进行恢复")]),t._v(" "),d("td",[t._v("失足不成千古恨，想重来时就重来")]),t._v(" "),d("td",[t._v("备份、后悔机制")]),t._v(" "),d("td",[t._v("草稿箱")])]),t._v(" "),d("tr",[d("td",[t._v("中介者模式（Mediator Pattern）")]),t._v(" "),d("td",[t._v("将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散")]),t._v(" "),d("td",[t._v("联系方式我给你，怎么搞定我不管")]),t._v(" "),d("td",[t._v("统一管理网状资源")]),t._v(" "),d("td",[t._v("朋友圈")])]),t._v(" "),d("tr",[d("td",[t._v("解释器模式（Interpreter Pattern）")]),t._v(" "),d("td",[t._v("给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子")]),t._v(" "),d("td",[t._v("我想说”方言“，一切解释权都归我")]),t._v(" "),d("td",[t._v("实现特定语法解析")]),t._v(" "),d("td",[t._v("摩斯密码")])]),t._v(" "),d("tr",[d("td",[t._v("观察者模式（Observer Pattern）")]),t._v(" "),d("td",[t._v("状态发生改变时通知观察者，一对多的关系")]),t._v(" "),d("td",[t._v("到点就通知我")]),t._v(" "),d("td",[t._v("解耦观察者与被观察者")]),t._v(" "),d("td",[t._v("闹钟")])]),t._v(" "),d("tr",[d("td",[t._v("访问者模式（Visitor Pattern）")]),t._v(" "),d("td",[t._v("稳定数据结构，定义新的操作行为")]),t._v(" "),d("td",[t._v("横看成岭侧成峰，远近高低各不同")]),t._v(" "),d("td",[t._v("解耦数据结构和数据操作")]),t._v(" "),d("td",[t._v("KPI考核")])]),t._v(" "),d("tr",[d("td",[t._v("委派模式（Delegate Pattern）")]),t._v(" "),d("td",[t._v("允许对象组合实现与继承相同的代码重用，负责任务的调用和分配")]),t._v(" "),d("td",[t._v("这个需求很简单，怎么实现我不管")]),t._v(" "),d("td",[t._v("只对结果负责")]),t._v(" "),d("td",[t._v("授权委托书")])])])])])}),[],!1,null,null,null);_.default=r.exports}}]);