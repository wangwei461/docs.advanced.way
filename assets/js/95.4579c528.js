(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{498:function(n,t,e){"use strict";e.r(t);var a=e(25),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[n._v("#")]),n._v(" 设计模式")]),n._v(" "),e("h3",{attrs:{id:"单利模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单利模式"}},[n._v("#")]),n._v(" 单利模式")]),n._v(" "),e("p",[n._v("单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例")]),n._v(" "),e("h4",{attrs:{id:"实现方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[n._v("#")]),n._v(" 实现方式")]),n._v(" "),e("h5",{attrs:{id:"饿汉式单例-立即加载方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#饿汉式单例-立即加载方式"}},[n._v("#")]),n._v(" 饿汉式单例（立即加载方式）")]),n._v(" "),e("p",[n._v("饿汉式单例在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 饿汉式单例\npublic class Singleton {\n    // 私有构造\n    private Singleton() {}\n\n    private static Singleton single = new Singleton();\n\n    // 静态工厂方法\n    public static Singleton getInstance() {\n        return single;\n    }\n}\n")])])]),e("h5",{attrs:{id:"懒汉式单例-延迟加载方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒汉式单例-延迟加载方式"}},[n._v("#")]),n._v(" 懒汉式单例（延迟加载方式）")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 懒汉式单例\npublic class Singleton {\n\n    // 私有构造\n    private Singleton() {}\n\n    private static Singleton single = null;\n\n    public static Singleton getInstance() {\n        if(single == null){\n            single = new Singleton();\n        }\n        return single;\n    }\n}\n")])])]),e("blockquote",[e("p",[n._v("缺点: 多线程环境下会产生多个single对象")])]),n._v(" "),e("p",[n._v("在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Singleton {\n    // 私有构造\n    private Singleton() {}\n\n    private static Singleton single = null;\n\n    public static Singleton getInstance() {\n        \n        // 等同于 synchronized public static Singleton getInstance()\n        synchronized(Singleton.class){\n          // 注意：里面的判断是一定要加的，否则出现线程安全问题\n            if(single == null){\n                single = new Singleton();\n            }\n        }\n        return single;\n    }\n}\n")])])]),e("p",[n._v("双重校验锁"),e("br"),n._v("\n使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Singleton {\n    // 私有构造\n    private Singleton() {}\n\n    private static Singleton single = null;\n\n    // 双重检查\n    public static Singleton getInstance() {\n        if (single == null) {\n            synchronized (Singleton.class) {\n                if (single == null) {\n                    single = new Singleton4();\n                }\n            }\n        }\n        return single;\n    }\n}\n")])])]),e("h5",{attrs:{id:"静态内部类实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态内部类实现"}},[n._v("#")]),n._v(" 静态内部类实现")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Singleton6 {\n    // 私有构造\n    private Singleton6() {}\n\n    // 静态内部类\n    private static class InnerObject{\n        private static Singleton6 single = new Singleton6();\n    }\n    \n    public static Singleton6 getInstance() {\n        return InnerObject.single;\n    }\n}\n")])])]),e("blockquote",[e("p",[n._v("静态内部类虽然保证了单例在多线程并发下的线程安全性，但是在遇到序列化对象时，默认的方式运行得到的结果就是多例的")])]),n._v(" "),e("h5",{attrs:{id:"static静态代码块实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#static静态代码块实现"}},[n._v("#")]),n._v(" static静态代码块实现")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Singleton6 {\n    \n    // 私有构造\n    private Singleton6() {}\n    \n    private static Singleton6 single = null;\n\n    // 静态代码块\n    static{\n        single = new Singleton6();\n    }\n    \n    public static Singleton6 getInstance() {\n        return single;\n    }\n}\n")])])]),e("h3",{attrs:{id:"前端控制器模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端控制器模式"}},[n._v("#")]),n._v(" 前端控制器模式")]),n._v(" "),e("p",[n._v("前端控制器模式（Front Controller Pattern）是用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。以下是这种设计模式的实体。")]),n._v(" "),e("ul",[e("li",[n._v("前端控制器（Front Controller） - 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。")]),n._v(" "),e("li",[n._v("调度器（Dispatcher） - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。")]),n._v(" "),e("li",[n._v("视图（View） - 视图是为请求而创建的对象。")])])])}),[],!1,null,null,null);t.default=s.exports}}]);