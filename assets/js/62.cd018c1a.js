(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{577:function(t,a,r){t.exports=r.p+"assets/img/3-1Q115142115M2.e522782e.gif"},778:function(t,a,r){"use strict";r.r(a);var e=r(28),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),e("p",[t._v("装饰模式（Decorator），动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活")]),t._v(" "),e("p",[t._v("优点:")]),t._v(" "),e("ul",[e("li",[t._v("装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用")]),t._v(" "),e("li",[t._v("通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果")]),t._v(" "),e("li",[t._v("装饰器模式完全遵守开闭原则")])]),t._v(" "),e("p",[t._v("缺点: 装饰器模式会增加许多子类，过度使用会增加程序得复杂性")]),t._v(" "),e("h2",{attrs:{id:"基本模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本模式"}},[t._v("#")]),t._v(" 基本模式")]),t._v(" "),e("h3",{attrs:{id:"uml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uml"}},[t._v("#")]),t._v(" UML")]),t._v(" "),e("p",[e("img",{attrs:{src:r(577),alt:""}})]),t._v(" "),e("ol",[e("li",[t._v("抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象")]),t._v(" "),e("li",[t._v("具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责")]),t._v(" "),e("li",[t._v("抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能")]),t._v(" "),e("li",[t._v("具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任")])]),t._v(" "),e("h3",{attrs:{id:"实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")])])}),[],!1,null,null,null);a.default=s.exports}}]);