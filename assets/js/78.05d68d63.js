(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{609:function(e,s,a){"use strict";a.r(s);var t=a(28),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("用于定义和运行多容器 Docker 应用程序的工具")]),e._v(" "),a("h2",{attrs:{id:"compose-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose-安装"}},[e._v("#")]),e._v(" Compose 安装")]),e._v(" "),a("p",[e._v("最新发行版 "),a("a",{attrs:{href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/docker/compose/releases"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[e._v("#")]),e._v(" 指令")]),e._v(" "),a("h3",{attrs:{id:"version"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version"}},[e._v("#")]),e._v(" version")]),e._v(" "),a("p",[e._v("指定本 yml 依从的 compose 哪个版本制定的。")]),e._v(" "),a("h3",{attrs:{id:"build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[e._v("#")]),e._v(" build")]),e._v(" "),a("p",[e._v("指定为构建镜像上下文路径：")]),e._v(" "),a("p",[e._v("例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: "3.7"\nservices:\n  webapp:\n    build: ./dir\n')])])]),a("p",[e._v("或者，作为具有在上下文指定的路径的对象，以及可选的 Dockerfile 和 args：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: "3.7"\nservices:\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n      labels:\n        - "com.example.description=Accounting webapp"\n        - "com.example.department=Finance"\n        - "com.example.label-with-empty-value"\n      target: prod\n')])])]),a("ul",[a("li",[e._v("context：上下文路径。")]),e._v(" "),a("li",[e._v("dockerfile：指定构建镜像的 Dockerfile 文件名。")]),e._v(" "),a("li",[e._v("args：添加构建参数，这是只能在构建过程中访问的环境变量。")]),e._v(" "),a("li",[e._v("labels：设置构建镜像的标签。")]),e._v(" "),a("li",[e._v("target：多层构建，可以指定构建哪一层。")])]),e._v(" "),a("h3",{attrs:{id:"cap-add-cap-drop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap-add-cap-drop"}},[e._v("#")]),e._v(" cap_add，cap_drop")]),e._v(" "),a("p",[e._v("添加或删除容器拥有的宿主机的内核功能。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cap_add:\n  - ALL # 开启全部权限\n\ncap_drop:\n  - SYS_PTRACE # 关闭 ptrace权限\n")])])]),a("h3",{attrs:{id:"cgroup-parent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cgroup-parent"}},[e._v("#")]),e._v(" cgroup_parent")]),e._v(" "),a("p",[e._v("为容器指定父 cgroup 组，意味着将继承该组的资源限制。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cgroup_parent: m-executor-abcd\n")])])]),a("h3",{attrs:{id:"command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command"}},[e._v("#")]),e._v(" command")]),e._v(" "),a("p",[e._v("覆盖容器启动的默认命令。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('command: ["bundle", "exec", "thin", "-p", "3000"]\n')])])]),a("h3",{attrs:{id:"container-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#container-name"}},[e._v("#")]),e._v(" container_name")]),e._v(" "),a("p",[e._v("指定自定义容器名称，而不是生成的默认名称。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("container_name: my-web-container\n")])])]),a("h3",{attrs:{id:"depends-on"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#depends-on"}},[e._v("#")]),e._v(" depends_on")]),e._v(" "),a("p",[e._v("设置依赖关系。")]),e._v(" "),a("ul",[a("li",[e._v("docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。")]),e._v(" "),a("li",[e._v("docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。")]),e._v(" "),a("li",[e._v("docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: "3.7"\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n')])])]),a("p",[e._v("注意：web 服务不会等待 redis db 完全启动 之后才启动。")]),e._v(" "),a("h3",{attrs:{id:"deploy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy"}},[e._v("#")]),e._v(" deploy")]),e._v(" "),a("p",[e._v("指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("version: \"3.7\"\nservices:\n  redis:\n    image: redis:alpine\n    deploy:\n      mode：replicated\n      replicas: 6\n      endpoint_mode: dnsrr\n      labels: \n        description: \"This redis service label\"\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 50M\n        reservations:\n          cpus: '0.25'\n          memory: 20M\n      restart_policy:\n        condition: on-failure\n        delay: 5s\n        max_attempts: 3\n        window: 120s\n")])])]),a("p",[e._v("可以选参数：")]),e._v(" "),a("p",[a("strong",[e._v("endpoint_mode")]),e._v("：访问集群服务的方式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("endpoint_mode: vip \n# Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。\nendpoint_mode: dnsrr\n# DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。\n")])])]),a("p",[a("strong",[e._v("labels")]),e._v("：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。")]),e._v(" "),a("p",[a("strong",[e._v("mode")]),e._v("：指定服务提供的模式。")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("replicated")]),e._v("：复制服务，复制指定服务到集群的机器上。")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("global")]),e._v("：全局服务，服务将部署至集群的每个节点。")])]),e._v(" "),a("li",[a("p",[e._v("图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2019/11/docker-composex.png",alt:"img"}})])])]),e._v(" "),a("p",[a("strong",[e._v("replicas：mode")]),e._v(" 为 replicated 时，需要使用此参数配置具体运行的节点数量。")]),e._v(" "),a("p",[a("strong",[e._v("resources")]),e._v("：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。")]),e._v(" "),a("p",[a("strong",[e._v("restart_policy")]),e._v("：配置如何在退出容器时重新启动容器。")]),e._v(" "),a("ul",[a("li",[e._v("condition：可选 none，on-failure 或者 any（默认值：any）。")]),e._v(" "),a("li",[e._v("delay：设置多久之后重启（默认值：0）。")]),e._v(" "),a("li",[e._v("max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。")]),e._v(" "),a("li",[e._v("window：设置容器重启超时时间（默认值：0）。")])]),e._v(" "),a("p",[a("strong",[e._v("rollback_config")]),e._v("：配置在更新失败的情况下应如何回滚服务。")]),e._v(" "),a("ul",[a("li",[e._v("parallelism：一次要回滚的容器数。如果设置为0，则所有容器将同时回滚。")]),e._v(" "),a("li",[e._v("delay：每个容器组回滚之间等待的时间（默认为0s）。")]),e._v(" "),a("li",[e._v("failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认pause）。")]),e._v(" "),a("li",[e._v("monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。")]),e._v(" "),a("li",[e._v("max_failure_ratio：在回滚期间可以容忍的故障率（默认为0）。")]),e._v(" "),a("li",[e._v("order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。")])]),e._v(" "),a("p",[a("strong",[e._v("update_config")]),e._v("：配置应如何更新服务，对于配置滚动更新很有用。")]),e._v(" "),a("ul",[a("li",[e._v("parallelism：一次更新的容器数。")]),e._v(" "),a("li",[e._v("delay：在更新一组容器之间等待的时间。")]),e._v(" "),a("li",[e._v("failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者pause （默认：pause）。")]),e._v(" "),a("li",[e._v("monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。")]),e._v(" "),a("li",[e._v("max_failure_ratio：在更新过程中可以容忍的故障率。")]),e._v(" "),a("li",[e._v("order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认stop-first）。")])]),e._v(" "),a("p",[a("strong",[e._v("注")]),e._v("：仅支持 V3.4 及更高版本。")]),e._v(" "),a("h3",{attrs:{id:"devices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#devices"}},[e._v("#")]),e._v(" devices")]),e._v(" "),a("p",[e._v("指定设备映射列表。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('devices:\n  - "/dev/ttyUSB0:/dev/ttyUSB0"\n')])])]),a("h3",{attrs:{id:"dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[e._v("#")]),e._v(" dns")]),e._v(" "),a("p",[e._v("自定义 DNS 服务器，可以是单个值或列表的多个值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dns: 8.8.8.8\n\ndns:\n  - 8.8.8.8\n  - 9.9.9.9\n")])])]),a("h3",{attrs:{id:"dns-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns-search"}},[e._v("#")]),e._v(" dns_search")]),e._v(" "),a("p",[e._v("自定义 DNS 搜索域。可以是单个值或列表。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dns_search: example.com\n\ndns_search:\n  - dc1.example.com\n  - dc2.example.com\n")])])]),a("h3",{attrs:{id:"entrypoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[e._v("#")]),e._v(" entrypoint")]),e._v(" "),a("p",[e._v("覆盖容器默认的 entrypoint。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("entrypoint: /code/entrypoint.sh\n")])])]),a("p",[e._v("也可以是以下格式：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("entrypoint:\n    - php\n    - -d\n    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so\n    - -d\n    - memory_limit=-1\n    - vendor/bin/phpunit\n")])])]),a("h3",{attrs:{id:"env-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env-file"}},[e._v("#")]),e._v(" env_file")]),e._v(" "),a("p",[e._v("从文件添加环境变量。可以是单个值或列表的多个值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("env_file: .env\n")])])]),a("p",[e._v("也可以是列表格式：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("env_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n")])])]),a("h3",{attrs:{id:"environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#environment"}},[e._v("#")]),e._v(" environment")]),e._v(" "),a("p",[e._v("添加环境变量。您可以使用数组或字典、任何布尔值，布尔值需要用引号引起来，以确保 YML 解析器不会将其转换为 True 或 False。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("environment:\n  RACK_ENV: development\n  SHOW: 'true'\n")])])]),a("h3",{attrs:{id:"expose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[e._v("#")]),e._v(" expose")]),e._v(" "),a("p",[e._v("暴露端口，但不映射到宿主机，只被连接的服务访问。")]),e._v(" "),a("p",[e._v("仅可以指定内部端口为参数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('expose:\n - "3000"\n - "8000"\n')])])]),a("h3",{attrs:{id:"extra-hosts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extra-hosts"}},[e._v("#")]),e._v(" extra_hosts")]),e._v(" "),a("p",[e._v("添加主机名映射。类似 docker client --add-host。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('extra_hosts:\n - "somehost:162.242.195.82"\n - "otherhost:50.31.209.229"\n')])])]),a("p",[e._v("以上会在此服务的内部容器中 /etc/hosts 创建一个具有 ip 地址和主机名的映射关系：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("162.242.195.82  somehost\n50.31.209.229   otherhost\n")])])]),a("h3",{attrs:{id:"healthcheck"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck"}},[e._v("#")]),e._v(" healthcheck")]),e._v(" "),a("p",[e._v("用于检测 docker 服务是否健康运行。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('healthcheck:\n  test: ["CMD", "curl", "-f", "http://localhost"] # 设置检测程序\n  interval: 1m30s # 设置检测间隔\n  timeout: 10s # 设置检测超时时间\n  retries: 3 # 设置重试次数\n  start_period: 40s # 启动后，多少秒开始启动检测程序\n')])])]),a("h3",{attrs:{id:"image"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image"}},[e._v("#")]),e._v(" image")]),e._v(" "),a("p",[e._v("指定容器运行的镜像。以下格式都可以：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("image: redis\nimage: ubuntu:14.04\nimage: tutum/influxdb\nimage: example-registry.com:4000/postgresql\nimage: a4bc65fd # 镜像id\n")])])]),a("h3",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" logging")]),e._v(" "),a("p",[e._v("服务的日志记录配置。")]),e._v(" "),a("p",[e._v("driver：指定服务容器的日志记录驱动程序，默认值为json-file。有以下三个选项")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('driver: "json-file"\ndriver: "syslog"\ndriver: "none"\n')])])]),a("p",[e._v("仅在 json-file 驱动程序下，可以使用以下参数，限制日志得数量和大小。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('logging:\n  driver: json-file\n  options:\n    max-size: "200k" # 单个文件大小为200k\n    max-file: "10" # 最多10个文件\n')])])]),a("p",[e._v("当达到文件限制上限，会自动删除旧得文件。")]),e._v(" "),a("p",[e._v("syslog 驱动程序下，可以使用 syslog-address 指定日志接收地址。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('logging:\n  driver: syslog\n  options:\n    syslog-address: "tcp://192.168.0.42:123"\n')])])]),a("h3",{attrs:{id:"network-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network-mode"}},[e._v("#")]),e._v(" network_mode")]),e._v(" "),a("p",[e._v("设置网络模式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('network_mode: "bridge"\nnetwork_mode: "host"\nnetwork_mode: "none"\nnetwork_mode: "service:[service name]"\nnetwork_mode: "container:[container name/id]"\n')])])]),a("p",[e._v("networks")]),e._v(" "),a("p",[e._v("配置容器连接的网络，引用顶级 networks 下的条目 。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("services:\n  some-service:\n    networks:\n      some-network:\n        aliases:\n         - alias1\n      other-network:\n        aliases:\n         - alias2\nnetworks:\n  some-network:\n    # Use a custom driver\n    driver: custom-driver-1\n  other-network:\n    # Use a custom driver which takes special options\n    driver: custom-driver-2\n")])])]),a("p",[a("strong",[e._v("aliases")]),e._v(" ：同一网络上的其他容器可以使用服务名称或此别名来连接到对应容器的服务。")]),e._v(" "),a("h3",{attrs:{id:"restart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restart"}},[e._v("#")]),e._v(" restart")]),e._v(" "),a("ul",[a("li",[e._v("no：是默认的重启策略，在任何情况下都不会重启容器。")]),e._v(" "),a("li",[e._v("always：容器总是重新启动。")]),e._v(" "),a("li",[e._v("on-failure：在容器非正常退出时（退出状态非0），才会重启容器。")]),e._v(" "),a("li",[e._v("unless-stopped：在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('restart: "no"\nrestart: always\nrestart: on-failure\nrestart: unless-stopped\n')])])]),a("p",[e._v("注：swarm 集群模式，请改用 restart_policy。")]),e._v(" "),a("h3",{attrs:{id:"secrets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#secrets"}},[e._v("#")]),e._v(" secrets")]),e._v(" "),a("p",[e._v("存储敏感数据，例如密码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: "3.1"\nservices:\n\nmysql:\n  image: mysql\n  environment:\n    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/my_secret\n  secrets:\n    - my_secret\n\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n')])])]),a("h3",{attrs:{id:"security-opt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security-opt"}},[e._v("#")]),e._v(" security_opt")]),e._v(" "),a("p",[e._v("修改容器默认的 schema 标签。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("security-opt：\n  - label:user:USER   # 设置容器的用户标签\n  - label:role:ROLE   # 设置容器的角色标签\n  - label:type:TYPE   # 设置容器的安全策略标签\n  - label:level:LEVEL  # 设置容器的安全等级标签\n")])])]),a("h3",{attrs:{id:"stop-grace-period"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop-grace-period"}},[e._v("#")]),e._v(" stop_grace_period")]),e._v(" "),a("p",[e._v("指定在容器无法处理 SIGTERM (或者任何 stop_signal 的信号)，等待多久后发送 SIGKILL 信号关闭容器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("stop_grace_period: 1s # 等待 1 秒\nstop_grace_period: 1m30s # 等待 1 分 30 秒 \n")])])]),a("p",[e._v("默认的等待时间是 10 秒。")]),e._v(" "),a("h3",{attrs:{id:"stop-signal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop-signal"}},[e._v("#")]),e._v(" stop_signal")]),e._v(" "),a("p",[e._v("设置停止容器的替代信号。默认情况下使用 SIGTERM 。")]),e._v(" "),a("p",[e._v("以下示例，使用 SIGUSR1 替代信号 SIGTERM 来停止容器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("stop_signal: SIGUSR1\n")])])]),a("h3",{attrs:{id:"sysctls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sysctls"}},[e._v("#")]),e._v(" sysctls")]),e._v(" "),a("p",[e._v("设置容器中的内核参数，可以使用数组或字典格式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n")])])]),a("h3",{attrs:{id:"tmpfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tmpfs"}},[e._v("#")]),e._v(" tmpfs")]),e._v(" "),a("p",[e._v("在容器内安装一个临时文件系统。可以是单个值或列表的多个值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("tmpfs: /run\n\ntmpfs:\n  - /run\n  - /tmp\n")])])]),a("h3",{attrs:{id:"ulimits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ulimits"}},[e._v("#")]),e._v(" ulimits")]),e._v(" "),a("p",[e._v("覆盖容器默认的 ulimit。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n")])])]),a("h3",{attrs:{id:"volumes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volumes"}},[e._v("#")]),e._v(" volumes")]),e._v(" "),a("p",[e._v("将主机的数据卷或着文件挂载到容器里。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('version: "3.7"\nservices:\n  db:\n    image: postgres:latest\n    volumes:\n      - "/localhost/postgres.sock:/var/run/postgres/postgres.sock"\n      - "/localhost/data:/var/lib/postgresql/data"\n')])])])])}),[],!1,null,null,null);s.default=r.exports}}]);