(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{527:function(t,a,s){t.exports=s.p+"assets/img/181453414212066.c8f31d0d.png"},528:function(t,a,s){t.exports=s.p+"assets/img/1814540406289813.e4b19031.png"},697:function(t,a,s){"use strict";s.r(a);var n=s(27),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"spring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),n("h3",{attrs:{id:"为什么要使用-spring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用-spring"}},[t._v("#")]),t._v(" 为什么要使用 spring？")]),t._v(" "),n("ul",[n("li",[t._v("spring 提供 ioc 技术，容器会帮你管理依赖的对象，从而不需要自己创建和管理依赖对象了，更轻松的实现了程序的解耦。")]),t._v(" "),n("li",[t._v("spring 提供了事务支持，使得事务操作变的更加方便。")]),t._v(" "),n("li",[t._v("spring 提供了面向切片编程，这样可以更方便的处理某一类的问题。")]),t._v(" "),n("li",[t._v("更方便的框架集成，spring 可以很方便的集成其他框架，比如 MyBatis、hibernate 等")])]),t._v(" "),n("h3",{attrs:{id:"解释一下什么是-aop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释一下什么是-aop"}},[t._v("#")]),t._v(" 解释一下什么是 aop？")]),t._v(" "),n("p",[t._v("aop 是面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。")]),t._v(" "),n("p",[t._v("简单来说就是统一处理某一“切面”（类）的问题的编程思想，比如统一处理日志、异常等。")]),t._v(" "),n("h3",{attrs:{id:"spring-循环依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-循环依赖"}},[t._v("#")]),t._v(" spring 循环依赖")]),t._v(" "),n("h3",{attrs:{id:"解释一下什么是-ioc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解释一下什么是-ioc"}},[t._v("#")]),t._v(" 解释一下什么是 ioc？")]),t._v(" "),n("p",[t._v("ioc：Inversionof Control（中文：控制反转）是 spring 的核心，对于 spring 框架来说，就是由 spring 来负责控制对象的生命周期和对象间的关系。")]),t._v(" "),n("p",[t._v("简单来说，控制指的是当前对象对内部成员的控制权；控制反转指的是，这种控制权不由当前对象管理了，由其他（类,第三方容器）来管理。")]),t._v(" "),n("h3",{attrs:{id:"spring-有哪些主要模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-有哪些主要模块"}},[t._v("#")]),t._v(" spring 有哪些主要模块？")]),t._v(" "),n("p",[t._v("spring core：框架的最基础部分，提供 ioc 和依赖注入特性。\nspring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。\nspring dao：Data Access Object 提供了JDBC的抽象层。\nspring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。\nspring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。\nspring Web mvc：spring 中的 mvc 封装包提供了 Web 应用的 Model-View-Controller（MVC）的实现。")]),t._v(" "),n("h3",{attrs:{id:"spring-常用的注入方式有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-常用的注入方式有哪些"}},[t._v("#")]),t._v(" spring 常用的注入方式有哪些？")]),t._v(" "),n("ul",[n("li",[t._v("setter 属性注入")]),t._v(" "),n("li",[t._v("构造方法注入")]),t._v(" "),n("li",[t._v("注解方式注入")])]),t._v(" "),n("h3",{attrs:{id:"spring-中的-bean-是线程安全的吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-中的-bean-是线程安全的吗"}},[t._v("#")]),t._v(" spring 中的 bean 是线程安全的吗？")]),t._v(" "),n("p",[t._v("spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。")]),t._v(" "),n("p",[t._v("如何保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了，所以就可以保证线程安全了。")]),t._v(" "),n("h3",{attrs:{id:"spring-支持几种-bean-的作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-支持几种-bean-的作用域"}},[t._v("#")]),t._v(" spring 支持几种 bean 的作用域？")]),t._v(" "),n("p",[t._v("singleton：spring ioc 容器中只存在一个 bean 实例，bean 以单例模式存在，是系统默认值；\nprototype：每次从容器调用 bean 时都会创建一个新的示例，既每次 getBean()相当于执行 new Bean()操作；")]),t._v(" "),n("p",[t._v("Web 环境下的作用域：\nrequest：每次 http 请求都会创建一个 bean；\nsession：同一个 http session 共享一个 bean 实例；")]),t._v(" "),n("h3",{attrs:{id:"spring-自动装配-bean-有哪些方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-自动装配-bean-有哪些方式"}},[t._v("#")]),t._v(" spring 自动装配 bean 有哪些方式？")]),t._v(" "),n("p",[t._v("no：默认值，表示没有自动装配，应使用显式 bean 引用进行装配。\nbyName：它根据 bean 的名称注入对象依赖项。\nbyType：它根据类型注入对象依赖项。\n构造函数：通过构造函数来注入依赖项，需要设置大量的参数。\nautodetect：容器首先通过构造函数使用 autowire 装配，如果不能，则通过 byType 自动装配。")]),t._v(" "),n("h3",{attrs:{id:"spring-的事务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-的事务"}},[t._v("#")]),t._v(" spring 的事务")]),t._v(" "),n("h4",{attrs:{id:"事务实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事务实现方式"}},[t._v("#")]),t._v(" 事务实现方式")]),t._v(" "),n("ul",[n("li",[t._v("声明式事务：声明式事务也有两种实现方式，基于 xml 配置文件的方式和注解方式（在类上添加 @Transaction 注解）。")])]),t._v(" "),n("p",[n("code",[t._v("<tx:annotation-driven />")]),t._v(" "),n("code",[t._v("@Transaction")])]),t._v(" "),n("ul",[n("li",[t._v("编码方式：提供编码的形式管理和维护事务。")])]),t._v(" "),n("h4",{attrs:{id:"注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[t._v("#")]),t._v(" 注解")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Transactional")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("transactionManager")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传播级别")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("propagation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REQUIRED"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 隔离级别")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Isolation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Isolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DEFAULT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 超时时间 默认 -1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TransactionDefinition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TIMEOUT_DEFAULT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否只读")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readOnly")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回滚异常")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rollbackFor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rollbackForClassName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那些异常不回滚")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("noRollbackFor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    tring"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("noRollbackForClassName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),n("h4",{attrs:{id:"事务传播"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事务传播"}},[t._v("#")]),t._v(" 事务传播")]),t._v(" "),n("ul",[n("li",[t._v("PROPAGATION_REQUIRED")])]),t._v(" "),n("p",[t._v("Spring默认的传播机制，能满足绝大部分业务需求，如果外层有事务，则当前事务加入到外层事务，一块提交，一块回滚。如果外层没有事务，新建一个事务执行")]),t._v(" "),n("ul",[n("li",[t._v("PROPAGATION_REQUES_NEW")])]),t._v(" "),n("p",[t._v("该事务传播机制是每次都会新开启一个事务，同时把外层事务挂起，当当前事务执行完毕，恢复上层事务的执行。如果外层没有事务，执行当前新开启的事务即可")]),t._v(" "),n("ul",[n("li",[t._v("PROPAGATION_SUPPORT")])]),t._v(" "),n("p",[t._v("如果外层有事务，则加入外层事务，如果外层没有事务，则直接使用非事务方式执行。完全依赖外层的事务")]),t._v(" "),n("ul",[n("li",[t._v("PROPAGATION_NOT_SUPPORT")])]),t._v(" "),n("p",[t._v("该传播机制不支持事务，如果外层存在事务则挂起，执行完当前代码，则恢复外层事务，无论是否异常都不会回滚当前的代码")]),t._v(" "),n("ul",[n("li",[t._v("PROPAGATION_NEVER")])]),t._v(" "),n("p",[t._v("该传播机制不支持外层事务，即如果外层有事务就抛出异常")]),t._v(" "),n("ul",[n("li",[t._v("PROPAGATION_MANDATORY")])]),t._v(" "),n("p",[t._v("与NEVER相反，如果外层没有事务，则抛出异常")]),t._v(" "),n("ul",[n("li",[t._v("PROPAGATION_NESTED")])]),t._v(" "),n("p",[t._v("该传播机制的特点是可以保存状态保存点，当前事务回滚到某一个点，从而避免所有的嵌套事务都回滚，即各自回滚各自的，如果子事务没有把异常吃掉，基本还是会引起全部回滚的。")]),t._v(" "),n("h4",{attrs:{id:"隔离级别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#隔离级别"}},[t._v("#")]),t._v(" 隔离级别")]),t._v(" "),n("p",[t._v("spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离级别和数据库的隔离级别一致：")]),t._v(" "),n("ul",[n("li",[t._v("ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；")]),t._v(" "),n("li",[t._v("ISOLATIONREADUNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）；")]),t._v(" "),n("li",[t._v("ISOLATIONREADCOMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别；")]),t._v(" "),n("li",[t._v("ISOLATIONREPEATABLEREAD：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别；")]),t._v(" "),n("li",[t._v("ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读")])]),t._v(" "),n("ol",[n("li",[t._v("脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。")]),t._v(" "),n("li",[t._v("不可重复读 ：是指在一个事务内，多次读同一数据。")]),t._v(" "),n("li",[t._v("幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了")])]),t._v(" "),n("h4",{attrs:{id:"回滚规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回滚规则"}},[t._v("#")]),t._v(" 回滚规则")]),t._v(" "),n("p",[t._v("在默认设置下，事务只在出现运行时异常（runtime exception）时回滚，而在出现受检查异常（checked exception）时不回滚")]),t._v(" "),n("h4",{attrs:{id:"实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),n("p",[t._v("利用了动态代理")]),t._v(" "),n("p",[t._v("Spring在检查到 @Transactional注解之后，给这个对象生成了一个代理对象proxy")]),t._v(" "),n("p",[t._v("代理对象的method，会先开启事务（beginTransaction），然后再去执行原先对象target的method，如果抛异常，则回滚（rollBack），如果一切顺利，则提交（commit）")]),t._v(" "),n("h2",{attrs:{id:"spring-mvc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[t._v("#")]),t._v(" Spring MVC")]),t._v(" "),n("h3",{attrs:{id:"说一下-spring-mvc-运行流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说一下-spring-mvc-运行流程"}},[t._v("#")]),t._v(" 说一下 spring mvc 运行流程？")]),t._v(" "),n("p",[t._v("spring mvc 先将请求发送给 DispatcherServlet。\nDispatcherServlet 查询一个或多个 HandlerMapping，找到处理请求的 Controller。\nDispatcherServlet 再把请求提交到对应的 Controller。\nController 进行业务逻辑处理后，会返回一个ModelAndView。\nDispathcher 查询一个或多个 ViewResolver 视图解析器，找到 ModelAndView 对象指定的视图对象。\n视图对象负责渲染返回给客户端。")]),t._v(" "),n("h3",{attrs:{id:"spring-mvc-有哪些组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-有哪些组件"}},[t._v("#")]),t._v(" spring mvc 有哪些组件？")]),t._v(" "),n("p",[t._v("前置控制器 DispatcherServlet。\n映射控制器 HandlerMapping。\n处理器 Controller。\n模型和视图 ModelAndView。\n视图解析器 ViewResolver。")]),t._v(" "),n("h3",{attrs:{id:"requestmapping-的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-的作用是什么"}},[t._v("#")]),t._v(" @RequestMapping 的作用是什么？")]),t._v(" "),n("p",[t._v("将 http 请求映射到相应的类/方法上。")]),t._v(" "),n("h3",{attrs:{id:"autowired-的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#autowired-的作用是什么"}},[t._v("#")]),t._v(" @Autowired 的作用是什么？")]),t._v(" "),n("p",[t._v("@Autowired 它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作，通过@Autowired 的使用来消除 set/get 方法。")]),t._v(" "),n("h2",{attrs:{id:"spring-boot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[t._v("#")]),t._v(" Spring Boot")]),t._v(" "),n("h3",{attrs:{id:"什么是-spring-boot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-boot"}},[t._v("#")]),t._v(" 什么是 spring boot？")]),t._v(" "),n("p",[t._v("spring boot 是为 spring 服务的，是用来简化新 spring 应用的初始搭建以及开发过程的。")]),t._v(" "),n("h3",{attrs:{id:"为什么要用-spring-boot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-spring-boot"}},[t._v("#")]),t._v(" 为什么要用 spring boot？")]),t._v(" "),n("p",[t._v("配置简单\n独立运行\n自动装配\n无代码生成和 xml 配置\n提供应用监控\n易上手\n提升开发效率")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-启动原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-启动原理"}},[t._v("#")]),t._v(" spring boot 启动原理")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-生命周期"}},[t._v("#")]),t._v(" spring boot 生命周期")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-starters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-starters"}},[t._v("#")]),t._v(" spring boot starters")]),t._v(" "),n("ol",[n("li",[t._v("starter 命名 ，引入依赖;")]),t._v(" "),n("li",[t._v("编写自动配置类，用来初始化相关的 bean ;")]),t._v(" "),n("li",[t._v("指明自动配置类的配置文件 spring.factories ;")]),t._v(" "),n("li",[t._v("功能模块")])]),t._v(" "),n("h3",{attrs:{id:"spring-boot-核心配置文件是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-核心配置文件是什么"}},[t._v("#")]),t._v(" spring boot 核心配置文件是什么？")]),t._v(" "),n("p",[t._v("spring boot 核心的两个配置文件：")]),t._v(" "),n("p",[t._v("bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比 applicaton 优先加载，且 boostrap 里面的属性不能被覆盖；\napplication (. yml 或者 . properties)：用于 spring boot 项目的自动化配置。")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-配置文件有哪几种类型-它们有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-配置文件有哪几种类型-它们有什么区别"}},[t._v("#")]),t._v(" spring boot 配置文件有哪几种类型？它们有什么区别？")]),t._v(" "),n("p",[t._v("配置文件有 . properties 格式和 . yml 格式，它们主要的区别是书法风格不同。")]),t._v(" "),n("p",[t._v(". properties 配置如下：")]),t._v(" "),n("p",[t._v("spring. RabbitMQ. port=5672\n. yml 配置如下：")]),t._v(" "),n("p",[t._v("spring:\nRabbitMQ:\nport: 5672\n. yml 格式不支持 @PropertySource 注解导入。")]),t._v(" "),n("h3",{attrs:{id:"postconstruct"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postconstruct"}},[t._v("#")]),t._v(" @PostConstruct")]),t._v(" "),n("p",[t._v("被@PostConstruct修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器执行一次")]),t._v(" "),n("h3",{attrs:{id:"spring-boot-有哪些方式可以实现热部署"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-有哪些方式可以实现热部署"}},[t._v("#")]),t._v(" spring boot 有哪些方式可以实现热部署？")]),t._v(" "),n("p",[t._v("使用 devtools 启动热部署，添加 devtools 库，在配置文件中把 spring. devtools. restart. enabled 设置为 true；\n使用 Intellij Idea 编辑器，勾上自动编译或手动重新编译。")]),t._v(" "),n("h3",{attrs:{id:"jpa-和-hibernate-有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jpa-和-hibernate-有什么区别"}},[t._v("#")]),t._v(" jpa 和 hibernate 有什么区别？")]),t._v(" "),n("p",[t._v("jpa 全称 Java Persistence API，是 Java 持久化接口规范，hibernate 属于 jpa 的具体实现。")]),t._v(" "),n("h3",{attrs:{id:"什么是-spring-cloud"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-cloud"}},[t._v("#")]),t._v(" 什么是 spring cloud？")]),t._v(" "),n("p",[t._v("spring cloud 是一系列框架的有序集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 spring boot 的开发风格做到一键启动和部署。")]),t._v(" "),n("h3",{attrs:{id:"spring-cloud-断路器的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-断路器的作用是什么"}},[t._v("#")]),t._v(" spring cloud 断路器的作用是什么？")]),t._v(" "),n("p",[t._v("在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。")]),t._v(" "),n("h3",{attrs:{id:"spring-cloud-的核心组件有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-的核心组件有哪些"}},[t._v("#")]),t._v(" spring cloud 的核心组件有哪些？")]),t._v(" "),n("p",[t._v("Eureka：服务注册于发现。\nFeign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。\nRibbon：实现负载均衡，从一个服务的多台机器中选择一台。\nHystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。\nZuul：网关管理，由 Zuul 网关转发请求给对应的服务")]),t._v(" "),n("h3",{attrs:{id:"spring-bean-的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-的生命周期"}},[t._v("#")]),t._v(" spring bean 的生命周期")]),t._v(" "),n("p",[n("img",{attrs:{src:s(527),alt:""}}),t._v(" "),n("img",{attrs:{src:s(528),alt:""}})]),t._v(" "),n("ol",[n("li",[t._v("实例化 BeanFactoryPostProcessor,BeanFactoryPostProcessor, 执行Bean的构造器")]),t._v(" "),n("li",[t._v("设置对象属性(setter等)（依赖注入）")]),t._v(" "),n("li",[t._v("如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）")]),t._v(" "),n("li",[t._v("如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身")]),t._v(" "),n("li",[t._v("将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法")]),t._v(" "),n("li",[t._v("调用Bean的初始化方法(init-method)")]),t._v(" "),n("li",[t._v("将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法")]),t._v(" "),n("li",[t._v("容器初始化完成，使用Bean")]),t._v(" "),n("li",[t._v("容器关闭之前，调用Bean的销毁方法(destroy-method)")])]),t._v(" "),n("h3",{attrs:{id:"beanfactory和applicationcontext的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory和applicationcontext的区别"}},[t._v("#")]),t._v(" BeanFactory和ApplicationContext的区别")]),t._v(" "),n("p",[t._v("BeanFactory：")]),t._v(" "),n("p",[t._v("是Spring里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和取对象的功能；")]),t._v(" "),n("p",[t._v("ApplicationContext：")]),t._v(" "),n("p",[t._v("应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能；")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("国际化（MessageSource）")])]),t._v(" "),n("li",[n("p",[t._v("访问资源，如URL和文件（ResourceLoader）")])]),t._v(" "),n("li",[n("p",[t._v("载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层")])]),t._v(" "),n("li",[n("p",[t._v("消息发送、响应机制（ApplicationEventPublisher）")])]),t._v(" "),n("li",[n("p",[t._v("AOP（拦截器）")])])]),t._v(" "),n("p",[t._v("区别:")]),t._v(" "),n("p",[t._v("BeanFactory：")]),t._v(" "),n("p",[t._v("BeanFactory在启动的时候不会去实例化Bean，当有从容器中拿Bean的时候才会去实例化；")]),t._v(" "),n("p",[t._v("ApplicationContext：")]),t._v(" "),n("p",[t._v("ApplicationContext在启动的时候就把所有的Bean全部实例化了。它还可以为Bean配置lazy-init=true来让Bean延迟实例化；")]),t._v(" "),n("h3",{attrs:{id:"spring的ioc容器比new对象究竟好在哪"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring的ioc容器比new对象究竟好在哪"}},[t._v("#")]),t._v(" spring的IOC容器比New对象究竟好在哪")]),t._v(" "),n("ol",[n("li",[t._v("资源集中管理，实现资源的可配置和易管理")]),t._v(" "),n("li",[t._v("解耦合")])]),t._v(" "),n("h3",{attrs:{id:"autowired和-resource的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#autowired和-resource的区别"}},[t._v("#")]),t._v(" @autowired和@resource的区别")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("都可以用来装配bean. 都可以写在字段上,或写在setter方法上")])]),t._v(" "),n("li",[n("p",[t._v("@Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值 可以设置它的required属性为false")])]),t._v(" "),n("li",[n("p",[t._v("@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配.当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配")])]),t._v(" "),n("li",[n("p",[t._v("@Qualifier 限定描述符除了能根据名字进行注入，更能进行更细粒度的控制如何选择候选者")])])]),t._v(" "),n("h3",{attrs:{id:"synchronized与reentrantlock性能对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#synchronized与reentrantlock性能对比"}},[t._v("#")]),t._v(" synchronized与ReentrantLock性能对比")]),t._v(" "),n("p",[t._v("synchronized的性能确实要比ReentrantLock差个20%-30%")]),t._v(" "),n("h3",{attrs:{id:"spring-bean-实例化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean-实例化"}},[t._v("#")]),t._v(" spring bean 实例化")]),t._v(" "),n("ul",[n("li",[t._v("普通构造方法创建")]),t._v(" "),n("li",[t._v("静态工厂创建")]),t._v(" "),n("li",[t._v("实例工厂创建")])])])}),[],!1,null,null,null);a.default=r.exports}}]);